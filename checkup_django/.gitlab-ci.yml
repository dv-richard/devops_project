image: docker:latest

services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay2
  CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  CI_APPLICATION_TAG: $CI_COMMIT_SHA
  CI_APPLICATION_PATH_SLUG: $CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG

stages:
  - build-staging
  - staging
  - build-production
  - production

before_script:
  - export HTTP_PROXY=$http_proxy
  - export HTTPS_PROXY=$https_proxy
  - export http_proxy=$HTTP_PROXY
  - export https_proxy=$HTTPS_PROXY
  - |
    setup_docker() {
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
    }
    registry_login() {
      if [[ -n "$CI_REGISTRY_USER" ]]; then
        echo "Logging to GitLab Container Registry with CI credentials..."
        docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
        echo ""
      fi
    }
    setup_docker
    registry_login

build-staging:
  stage: build-staging
  script:
    - docker login registry-gitlab.montpellier3m.fr
    - setup_docker
    - registry_login
    - chmod 550 -R .

    - sed -i "s/BASE_URL=.*/BASE_URL=$STAGING_BASE_URL/" .env
    - sed -i "s/DJANGO_ALLOWED_HOSTS=.*/DJANGO_ALLOWED_HOSTS=$STAGING_DJANGO_ALLOWED_HOSTS/" .env
    - sed -i "s/DEBUG=.*/DEBUG=$STAGING_DEBUG/" .env
    - sed -i "s/SECRET_KEY=.*/SECRET_KEY=$SECRET_KEY/" .env
    - sed -i "s~CORS_ALLOWED_ORIGINS=.*~CORS_ALLOWED_ORIGINS=$STAGING_CORS_ALLOWED_ORIGINS~" .env

    - sed -i "s~OIDC_OP_AUTHORIZATION_ENDPOINT=.*~OIDC_OP_AUTHORIZATION_ENDPOINT=$STAGING_OIDC_OP_AUTHORIZATION_ENDPOINT~" .env
    - sed -i "s~OIDC_USER_ENDPOINT=.*~OIDC_USER_ENDPOINT=$STAGING_OIDC_USER_ENDPOINT~" .env
    - sed -i "s~OIDC_TOKEN_ENDPOINT=.*~OIDC_TOKEN_ENDPOINT=$STAGING_OIDC_TOKEN_ENDPOINT~" .env

    - sed -i "s~OIDC_CLIENT_ID=.*~OIDC_CLIENT_ID=$STAGING_OIDC_CLIENT_ID~" .env
    - sed -i "s~OIDC_CLIENT_SECRET=.*~OIDC_CLIENT_SECRET=$STAGING_OIDC_CLIENT_SECRET~" .env
    - sed -i "s~OIDC_RP_CALLBACK_URI=.*~OIDC_RP_CALLBACK_URI=$STAGING_OIDC_RP_CALLBACK_URI~" .env

    - docker build -t $CI_REGISTRY_IMAGE_DEVOPS/staging:$CI_APPLICATION_TAG
      --build-arg HTTP_PROXY="$HTTP_PROXY"
      --build-arg http_proxy="$http_proxy"
      --build-arg HTTPS_PROXY="$HTTPS_PROXY"
      --build-arg https_proxy="$https_proxy"
      --build-arg FTP_PROXY="$FTP_PROXY"
      --build-arg ftp_proxy="$ftp_proxy"
      --build-arg NO_PROXY="$NO_PROXY"
      --build-arg no_proxy="$no_proxy"
      --build-arg CI_REGISTRY_IMAGE_DEVOPS="$CI_REGISTRY_IMAGE_DEVOPS"
      -f Dockerfile .
    - docker push $CI_REGISTRY_IMAGE_DEVOPS/staging:$CI_APPLICATION_TAG
  only:
    - master

staging:
  stage: staging
  image: $DOCKER_IMG_PSU
  variables:
    STAGING_PORTAINER_URL: $STAGING_PORTAINER_URL
    PORTAINER_ENDPOINT: $STAGING_PORTAINER_ENDPOINT
    STACK_NAME: $STAGING_STACK_NAME
    APPLICATION_STACK_FILE: $STAGING_APPLICATION_STACK_FILE
    PORTAINER_USER: $STAGING_PORTAINER_USER
    PORTAINER_PASSWORD: $STAGING_PORTAINER_PASSWORD
  script:
    - registry_login
    - export IMAGE_TAG=$CI_APPLICATION_TAG
    - envsubst < $STAGING_APPLICATION_STACK_FILE > docker-compose.yml
    - psu deploy --debug --endpoint "$PORTAINER_ENDPOINT" --url "$STAGING_PORTAINER_URL" --user "$PORTAINER_USER" --password "$PORTAINER_PASSWORD" --compose-file docker-compose.yml --name "$STACK_NAME" --verbose
  environment:
    name: staging
    url: https://$STAGING_BASE_URL/
  only:
    - master

build-production:
  stage: build-production
  script:
    - docker login registry-gitlab.montpellier3m.fr
    - setup_docker
    - registry_login
    - chmod 550 -R .

    - sed -i "s/BASE_URL=.*/BASE_URL=$PRODUCTION_BASE_URL/" .env
    - sed -i "s/DJANGO_ALLOWED_HOSTS=.*/DJANGO_ALLOWED_HOSTS=$PRODUCTION_DJANGO_ALLOWED_HOSTS/" .env
    - sed -i "s/DEBUG=.*/DEBUG=$PRODUCTION_DEBUG/" .env
    - sed -i "s/SECRET_KEY=.*/SECRET_KEY=$SECRET_KEY/" .env
    - sed -i "s~CORS_ALLOWED_ORIGINS=.*~CORS_ALLOWED_ORIGINS=$PRODUCTION_CORS_ALLOWED_ORIGINS~" .env

    - sed -i "s~OIDC_OP_AUTHORIZATION_ENDPOINT=.*~OIDC_OP_AUTHORIZATION_ENDPOINT=$PRODUCTION_OIDC_OP_AUTHORIZATION_ENDPOINT~" .env
    - sed -i "s~OIDC_USER_ENDPOINT=.*~OIDC_USER_ENDPOINT=$PRODUCTION_OIDC_USER_ENDPOINT~" .env
    - sed -i "s~OIDC_TOKEN_ENDPOINT=.*~OIDC_TOKEN_ENDPOINT=$PRODUCTION_OIDC_TOKEN_ENDPOINT~" .env

    - sed -i "s~OIDC_CLIENT_ID=.*~OIDC_CLIENT_ID=$PRODUCTION_OIDC_CLIENT_ID~" .env
    - sed -i "s~OIDC_CLIENT_SECRET=.*~OIDC_CLIENT_SECRET=$PRODUCTION_OIDC_CLIENT_SECRET~" .env
    - sed -i "s~OIDC_RP_CALLBACK_URI=.*~OIDC_RP_CALLBACK_URI=$PRODUCTION_OIDC_RP_CALLBACK_URI~" .env

    - docker build -t $CI_REGISTRY_IMAGE_DEVOPS/production:$CI_APPLICATION_TAG --build-arg HTTP_PROXY="$HTTP_PROXY" --build-arg http_proxy="$http_proxy" --build-arg HTTPS_PROXY="$HTTPS_PROXY" --build-arg https_proxy="$https_proxy" --build-arg FTP_PROXY="$FTP_PROXY" --build-arg ftp_proxy="$ftp_proxy" --build-arg NO_PROXY="$NO_PROXY" --build-arg no_proxy="$no_proxy" -f Dockerfile .
    - docker push $CI_REGISTRY_IMAGE_DEVOPS/production:$CI_APPLICATION_TAG
  only:
    - master

production:
  stage: production
  image: $DOCKER_IMG_PSU
  variables:
    PROD_PORTAINER_URL: $PRODUCTION_PROD_PORTAINER_URL
    PORTAINER_ENDPOINT: $PRODUCTION_PORTAINER_ENDPOINT
    STACK_NAME: $PRODUCTION_STACK_NAME
    APPLICATION_STACK_FILE: $PRODUCTION_APPLICATION_STACK_FILE
    PORTAINER_USER: $PRODUCTION_PORTAINER_USER
    PORTAINER_PASSWORD: $PRODUCTION_PORTAINER_PASSWORD
  script:
    - registry_login
    - export IMAGE_TAG=$CI_APPLICATION_TAG
    - envsubst < $PRODUCTION_APPLICATION_STACK_FILE > docker-compose.yml
    - psu deploy --debug --endpoint "$PORTAINER_ENDPOINT" --url "$PROD_PORTAINER_URL" --user "$PORTAINER_USER" --password "$PORTAINER_PASSWORD" --compose-file docker-compose.yml --name "$STACK_NAME" --verbose
  environment:
    name: production
    url: https://$SPRODUCTION_BASE_URL/
  only:
    - master
  when: manual
